#このコードは、「YouTubeのFeedsページにアクセスし、新しく投稿された動画のIDを取得する」ものです。
#前半はGoogleDrive_Tipsで載せた、ドライブ連携で必要なコードを書いています。
#---
#---
#---のように、3列続いた区切り線より下部が本題の内容です。
#想定環境:Google Cloud Functions
---
#requirements.txt
#今回必要なパッケージ
requests
beautifulsoup4
google-cloud-pubsub
google-auth
google-api-python-client
---
#credentilals.json
#Google認証情報を用意
{
  "type": "service_account",
  "project_id": "project_id",
  "private_key_id": "private_key_id",
  "private_key": "private_key",
  "client_email": "client_email",
  "client_id": "client_id",
  "auth_uri": "auth_uri",
  "token_uri": "token_uri",
  "auth_provider_x509_cert_url": "auth_provider_x509_cert_url",
  "client_x509_cert_url": "client_x509_cert_url"
}
---
#main.py
import base64
import json
from google.cloud import pubsub_v1
import os.path
from googleapiclient.discovery import build
import google.auth
import io
from apiclient.http import MediaIoBaseDownload
from apiclient.http import MediaIoBaseUpload
import requests
from bs4 import BeautifulSoup

#pubsubの前準備
publisher = pubsub_v1.PublisherClient()
#Google認証コード
SCOPES = ["https://www.googleapis.com/auth/drive"]
scoped, project = google.auth.load_credentials_from_file("/workspace/credentials.json",scopes=SCOPES)
service = build("drive", "v3", credentials=scoped)

#pubsubへ送るコード
def publishing(destination,content):
  topic_path = publisher.topic_path("project_name",destination)
  data = str(content)
  data = data.encode("utf-8")
  publisher.publish(topic_path,data)

#ファイルのIDをサーチ
def searching(fileName):
  search = service.files().list(
    q = 'name="'+fileName+'"',
    fields = "files(id)"
    ).execute()
  fileId = [i["id"] for i in search["files"]]
  return fileId

#ファイルをダウンロード
def downloading(fileid):
  download = service.files().get_media(fileId=fileid)
  fh = io.BytesIO()
  downloader = MediaIoBaseDownload(fh, download)
  done = False
  while done is False:
    status, done = downloader.next_chunk()
  content = fh.getvalue().decode("utf-8").split(" ")
  return content

#ファイルをアップロード
def uploading(uploadName,fileid,content):
  metadata = {
    "name": uploadName,
    "parents": [fileid]
    }
  str_content = []  
  for i in content:
    str_content.append(str(i))
  joins = " ".join(str_content)
  encoder = joins.encode('utf-8')
  fh = io.BytesIO(encoder)
  media = MediaIoBaseUpload(fh, mimetype='application/json')
  upload = service.files().create(
    body = metadata,
    media_body=media,
    fields='id'
    ).execute()
  u_fileId = upload["id"]
  return u_fileId

#フォルダ下にフォルダを作成
def foldering(folderName,fileid):
  file_metadata = {
    'name':folderName,
    'parents':[fileid],
    'mimeType': 'application/vnd.google-apps.folder'
    }
  folder = service.files().create(
    body = file_metadata,
    fields='id'
    ).execute()
  f_fileId = folder["id"]
  return f_fileId

#ファイルに編集権限を与える
def permissioning(fileid):
  user_permission = {
    'type': 'user',
    'role': 'writer',
    'emailAddress': 'emailAddress'
  }
  permission = service.permissions().create(
      fileId=fileid,
      body=user_permission,
      fields='id'
      ).execute()
      
#ファイルを更新する      
def updating(content,fileid):
  str_content = []  
  for i in content:
    str_content.append(str(i))
  joins = " ".join(str_content)
  encoder = joins.encode("utf-8")
  fh = io.BytesIO(encoder)
  media = MediaIoBaseUpload(fh, mimetype="application/json")
  updated = service.files().update(
    fileId=fileid,
    fields='id',
    media_body=media
    ).execute()
  d_fileId = upload["id"]
  return d_fileId

def hello_pubsub(event, context):
  #pubsubから送られてくるチャンネルIDとビデオIDを確認
  pubsub_message = base64.b64decode(event['data']).decode('utf-8')
  channelId = pubsub_message[:24]
  videoId = pubsub_message[24:]
  
  #動画ページへアクセスします。チャット情報は数珠つなぎになっているため、まずはその先頭のデータを取得します。
  session = requests.Session()
  headers = {'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'}
  target_url = "https://www.youtube.com/watch?v="+videoId
  html = session.get(target_url, headers=headers)
  soup = BeautifulSoup(html.text, 'html.parser')

  #取得したHTMLから必要な部分を抽出
  for script in soup.find_all('script'):
    script_text = str(script)
    if 'ytInitialData' in script_text:
      for line in script_text.splitlines():
        if 'ytInitialData' in line:
          if 'var ytInitialData =' in line:
            if line[59] == "{" and line[-11] == "}":
              ytInitialData = json.loads(line[59:-10])
            else:
              InitialData = str(line).encode("utf-8")
              uploading(videoId,videoId+"_initialData.json",InitialData)
  
  #目的のデータがあった場合、次のFunctionsへチャンネルIDとビデオIDと先頭データを飛ばす
  #「ビデオID_chat」というフォルダを作る
  if "conversationBar" in ytInitialData["contents"]["twoColumnWatchNextResults"]:
    continuation = ytInitialData["contents"]["twoColumnWatchNextResults"]["conversationBar"]["liveChatRenderer"]["header"]["liveChatHeaderRenderer"]["viewSelector"]["sortFilterSubMenuRenderer"]["subMenuItems"][0]["continuation"]["reloadContinuationData"]["continuation"]
    
    publishing("continuation",channelId+videoId+continuation+"0")
    s_fileId = searching(channelId)
    f_fileId = foldering(videoId+"_chat",s_fileId)
    permissioning(f_fileId)
  #目的のデータがなく、「イニシャルバー」が異常であった場合、その旨を伝えるデータをアップロードする
  elif not "conversationBar" in ytInitialData["contents"]["twoColumnWatchNextResults"]:
    InitialBar = ytInitialData["contents"]["twoColumnWatchNextResults"].encode("utf-8")
    s_fileId = (videoId)
    u_fileId = uploading(videoId+"_initialBar.json",s_fileId,InitialBar)
    permissioning(u_fileId)
  #それ以外の場合、エラーがあったことを伝えるデータをアップロードする
  else:
    s_fileId = (videoId)
    u_fileId = uploading(videoId+"_initialOther.json",s_fileId,videoId)
    permissioning(u_fileId)
